"""init

Revision ID: 758bbbbaa55a
Revises: 
Create Date: 2025-04-25 19:41:09.425871

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '758bbbbaa55a'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('app_config',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.VARCHAR(), nullable=False),
    sa.Column('value', sa.VARCHAR(), nullable=False),
    sa.Column('description', sa.VARCHAR(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('update_at', postgresql.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('app_modules',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.VARCHAR(), nullable=False),
    sa.Column('description', sa.VARCHAR(), nullable=True),
    sa.Column('permissions', postgresql.ARRAY(sa.VARCHAR()), nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('update_at', postgresql.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('auth',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('email', sa.VARCHAR(), nullable=True),
    sa.Column('phone', sa.VARCHAR(), nullable=True),
    sa.Column('name', sa.VARCHAR(), nullable=True),
    sa.Column('user_type', sa.VARCHAR(), nullable=False),
    sa.Column('is_email_verified', sa.BOOLEAN(), nullable=True),
    sa.Column('is_phone_verified', sa.BOOLEAN(), nullable=True),
    sa.Column('two_factor_enabled', sa.BOOLEAN(), nullable=True),
    sa.Column('two_factor_option', sa.VARCHAR(), nullable=False),
    sa.Column('has_password', sa.Boolean(), nullable=True),
    sa.Column('password_hash', sa.VARCHAR(), nullable=True),
    sa.PrimaryKeyConstraint('uid'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('phone')
    )
    op.create_table('auth_meta_data',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('device_ip', sa.VARCHAR(), nullable=False),
    sa.Column('device_name', sa.VARCHAR(), nullable=False),
    sa.Column('device_os', sa.VARCHAR(), nullable=False),
    sa.Column('device_browser', sa.VARCHAR(), nullable=False),
    sa.Column('timezone', sa.VARCHAR(), nullable=False),
    sa.Column('user_agent', sa.VARCHAR(), nullable=False),
    sa.Column('login_time', postgresql.TIMESTAMP(), nullable=False),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_table('businesses',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('business_name', sa.VARCHAR(), nullable=False),
    sa.Column('business_address', sa.VARCHAR(), nullable=True),
    sa.Column('business_phone', sa.VARCHAR(), nullable=False),
    sa.Column('business_email', sa.VARCHAR(), nullable=True),
    sa.Column('logo_url', sa.VARCHAR(), nullable=True),
    sa.Column('business_type', sa.VARCHAR(), nullable=True),
    sa.Column('business_nature', sa.VARCHAR(), nullable=True),
    sa.Column('business_website', sa.VARCHAR(), nullable=True),
    sa.Column('business_reg_no', sa.VARCHAR(), nullable=True),
    sa.Column('certificate_url', sa.VARCHAR(), nullable=True),
    sa.Column('modules', postgresql.ARRAY(sa.VARCHAR()), nullable=True),
    sa.Column('business_kyc_status', sa.VARCHAR(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('update_at', postgresql.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tokens',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('identifier', sa.VARCHAR(), nullable=False),
    sa.Column('token', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('expiry', postgresql.TIMESTAMP(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('identifier')
    )
    op.create_table('users',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('business_id', sa.VARCHAR(), nullable=True),
    sa.Column('email', sa.VARCHAR(), nullable=True),
    sa.Column('phone', sa.VARCHAR(), nullable=True),
    sa.Column('first_name', sa.VARCHAR(), nullable=True),
    sa.Column('last_name', sa.VARCHAR(), nullable=True),
    sa.Column('image_url', sa.VARCHAR(), nullable=True),
    sa.Column('permissions', postgresql.ARRAY(sa.VARCHAR()), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('update_at', postgresql.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('uid'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('phone')
    )
    op.create_table('assets',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('business_id', sa.Uuid(), nullable=False),
    sa.Column('name', sa.VARCHAR(), nullable=False),
    sa.Column('description', sa.VARCHAR(), nullable=True),
    sa.Column('value', sa.FLOAT(), nullable=False),
    sa.Column('images', postgresql.ARRAY(sa.VARCHAR()), nullable=True),
    sa.Column('purchase_date', postgresql.TIMESTAMP(), nullable=False),
    sa.Column('warranty_expiry_date', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('asset_type', sa.VARCHAR(), nullable=False),
    sa.Column('asset_condition', sa.VARCHAR(), nullable=False),
    sa.Column('asset_status', sa.VARCHAR(), nullable=False),
    sa.Column('asset_location', sa.VARCHAR(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('update_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['business_id'], ['businesses.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('business_preferences',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('business_id', sa.Uuid(), nullable=False),
    sa.Column('sms_notification', sa.BOOLEAN(), nullable=False),
    sa.Column('sms_id', sa.VARCHAR(), nullable=True),
    sa.Column('email_notification', sa.BOOLEAN(), nullable=False),
    sa.Column('require_two_factor', sa.BOOLEAN(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('update_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['business_id'], ['businesses.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('contributions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('debit', sa.FLOAT(), nullable=False),
    sa.Column('credit', sa.FLOAT(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.uid'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('customers',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('business_id', sa.Uuid(), nullable=False),
    sa.Column('first_name', sa.VARCHAR(), nullable=False),
    sa.Column('last_name', sa.VARCHAR(), nullable=True),
    sa.Column('email', sa.VARCHAR(), nullable=True),
    sa.Column('phone', sa.VARCHAR(), nullable=True),
    sa.Column('image_url', sa.VARCHAR(), nullable=True),
    sa.Column('address', sa.VARCHAR(), nullable=True),
    sa.Column('payment_frequency', sa.VARCHAR(), nullable=False),
    sa.Column('next_payment_date', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('update_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['business_id'], ['businesses.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('transaction_types_setting',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('business_id', sa.Uuid(), nullable=False),
    sa.Column('type', sa.VARCHAR(), nullable=False),
    sa.Column('requires_approval', sa.BOOLEAN(), nullable=False),
    sa.Column('number_of_required_approval', sa.INTEGER(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['business_id'], ['businesses.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('transactions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('business_id', sa.Uuid(), nullable=False),
    sa.Column('amount', sa.FLOAT(), nullable=False),
    sa.Column('transaction_type', sa.VARCHAR(), nullable=False),
    sa.Column('status', sa.VARCHAR(), nullable=False),
    sa.Column('description', sa.VARCHAR(), nullable=True),
    sa.Column('meta_data', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('requires_approval', sa.BOOLEAN(), nullable=False),
    sa.Column('number_of_required_approval', sa.INTEGER(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['business_id'], ['businesses.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('transaction_approvals',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('transaction_id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['transaction_id'], ['transactions.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.uid'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('wallets',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('customer_id', sa.Uuid(), nullable=False),
    sa.Column('debit', sa.FLOAT(), nullable=False),
    sa.Column('credit', sa.FLOAT(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('wallets')
    op.drop_table('transaction_approvals')
    op.drop_table('transactions')
    op.drop_table('transaction_types_setting')
    op.drop_table('customers')
    op.drop_table('contributions')
    op.drop_table('business_preferences')
    op.drop_table('assets')
    op.drop_table('users')
    op.drop_table('tokens')
    op.drop_table('businesses')
    op.drop_table('auth_meta_data')
    op.drop_table('auth')
    op.drop_table('app_modules')
    op.drop_table('app_config')
    # ### end Alembic commands ###
